// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name zy_fpay_validacionfacial_lib_ios
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Alamofire
import CoreVideo
import CryptoSwift
import Foundation
import JWTDecode
import Microblink
import Swift
import UIKit
import _Concurrency
import _StringProcessing
@_exported import zy_fpay_validacionfacial_lib_ios
import zy_lib_become_ocr_ios
import zy_lib_idemia_face_ios
import zy_lib_ui_ios
public enum ZyTApiErrorEnum : Swift.Int {
  case EXITO
  case ERROR_VALIDATION
  case ERROR_UNSPECIFIED
  case BADREQUEST
  case INTERNAL_SERVER
  case UNAUTHORIZED
  case FORBIDDEN
  case NOTFOUND
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public func tipoDocToDni(tipoDocInput: Swift.String) -> Swift.String
public func versionLibreria() -> Swift.String
extension UIKit.UIColor {
  convenience public init?(hex: Swift.String)
}
public enum Model : Swift.String {
  case simulator, iPod1, iPod2, iPod3, iPod4, iPod5, iPod6, iPod7, iPad2, iPad3, iPad4, iPadAir, iPadAir2, iPadAir3, iPadAir4, iPadAir5, iPad5, iPad6, iPad7, iPad8, iPad9, iPadMini, iPadMini2, iPadMini3, iPadMini4, iPadMini5, iPadMini6, iPadPro9_7, iPadPro10_5, iPadPro11, iPadPro2_11, iPadPro3_11, iPadPro12_9, iPadPro2_12_9, iPadPro3_12_9, iPadPro4_12_9, iPadPro5_12_9, iPhone4, iPhone4S, iPhone5, iPhone5S, iPhone5C, iPhone6, iPhone6Plus, iPhone6S, iPhone6SPlus, iPhoneSE, iPhone7, iPhone7Plus, iPhone8, iPhone8Plus, iPhoneX, iPhoneXS, iPhoneXSMax, iPhoneXR, iPhone11, iPhone11Pro, iPhone11ProMax, iPhoneSE2, iPhone12Mini, iPhone12, iPhone12Pro, iPhone12ProMax, iPhone13Mini, iPhone13, iPhone13Pro, iPhone13ProMax, iPhoneSE3, iPhone14, iPhone14Plus, iPhone14Pro, iPhone14ProMax, iPhoneSE4, AppleWatch1, AppleWatchS1, AppleWatchS2, AppleWatchS3, AppleWatchS4, AppleWatchS5, AppleWatchSE, AppleWatchS6, AppleWatchS7, AppleWatchSEGPS40, AppleWatchSEGPS44, AppleWatchSEGPSCELL40, AppleWatchSEGPSCELL44, AppleWatchS8GPS40, AppleWatchS8GPS44, AppleWatchS8GPSCELL40, AppleWatchS8GPSCELL44, AppleWatchUltra, AppleTV, AppleTV1, AppleTV2, AppleTV3, AppleTV4, AppleTV_4K, AppleTV2_4K, unrecognized
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc(ZyApiCross) public class ZyApiCross : ObjectiveC.NSObject {
  public typealias CallbackLogin = (zy_fpay_validacionfacial_lib_ios.ZyLibResult<Swift.String, zy_fpay_validacionfacial_lib_ios.ZyLibError>) -> Swift.Void
  public typealias CallbackResponse = (zy_fpay_validacionfacial_lib_ios.ZyLibResult<zy_fpay_validacionfacial_lib_ios.ZyCrossResponse, zy_fpay_validacionfacial_lib_ios.ZyLibError>) -> Swift.Void
  @objc public init(onView: UIKit.UIViewController)
  public func login(ruc: Swift.String, user: Swift.String, pass: Swift.String, completion: @escaping zy_fpay_validacionfacial_lib_ios.ZyApiCross.CallbackLogin)
  public func iniciarFlujo(request: zy_fpay_validacionfacial_lib_ios.ZyCrossRequest, completion: @escaping zy_fpay_validacionfacial_lib_ios.ZyApiCross.CallbackResponse)
  @objc deinit
}
public class ZyLoadingApiUI {
  public typealias CallbackLoadingUI = (zy_fpay_validacionfacial_lib_ios.ZyUILoadingResult<Swift.Bool, Swift.Bool>) -> Swift.Void
  public init(onView: UIKit.UIViewController)
  public func showConfirm(request: zy_fpay_validacionfacial_lib_ios.ZyUILoadingRequest, completion: @escaping zy_fpay_validacionfacial_lib_ios.ZyLoadingApiUI.CallbackLoadingUI)
  @objc deinit
}
public enum ZyLibResult<T, E> {
  case success(T)
  case error(E)
}
public struct ZyLibError : Swift.Codable {
  public let coError: Swift.String?
  public let deError: Swift.String?
  public var soliNuOperacion: Swift.String?
  public var bmoNuSolicitud: Swift.String?
  public let bfResponseDto: zy_fpay_validacionfacial_lib_ios.BfResponseDto?
  public let ocrDto: zy_fpay_validacionfacial_lib_ios.OcrDto?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case coError, deError, soliNuOperacion, bmoNuSolicitud
    case bfResponseDto
    case ocrDto
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ZyValidacionRequest {
  public init()
  public var bioTiDoc: Swift.String
  public var bioNuDoc: Swift.String
  public var token: Swift.String
  public var bmoNombres: Swift.String
  public var bmoApPaterno: Swift.String
  public var bmoApMaterno: Swift.String
  public var idSolicitudBmo: Swift.String
  public var bmoNuOperacionEmps: Swift.String
  public var isDialogActivated: Swift.Bool
}
public struct ZyValidacionResponse {
  public let bioCodError: Swift.String
  public let bioDeError: Swift.String
  public let bioCodErrorReniec: Swift.String
  public let bioDeErrorReniec: Swift.String
  public let bioPreNom: Swift.String
  public let bioApPat: Swift.String
  public let bioApMat: Swift.String
  public let bioScore: Swift.String
  public let bioNuSolicitud: Swift.String
  public let bioIdTransaccion: Swift.String
  public let bmoIdSolicitud: Swift.String
}
public struct ZyCrossRequest {
  public init()
  public var token: Swift.String
  public var bioOperacion: zy_fpay_validacionfacial_lib_ios.ZyTipoOperacion?
  public var bioPais: Swift.String
  public var bmoNuOperacionEmps: Swift.String
  public var bmoNuSolicitud: Swift.String
  public var bioTiDoc: Swift.String
  public var bioNuDoc: Swift.String
  public var bmoNombres: Swift.String
  public var bmoApPaterno: Swift.String
  public var bmoApMaterno: Swift.String
  public var isDialogActivated: Swift.Bool
}
public struct ZyCrossResponse : Swift.Codable {
  public var coError: Swift.String
  public var deError: Swift.String
  public var soliNuOperacion: Swift.String
  public var bmoNuSolicitud: Swift.String
  public var bfResponseDto: zy_fpay_validacionfacial_lib_ios.BfResponseDto?
  public var ocrDto: zy_fpay_validacionfacial_lib_ios.OcrDto?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case coError, deError, soliNuOperacion, bmoNuSolicitud
    case bfResponseDto
    case ocrDto
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct BfResponseDto : Swift.Codable {
  public var bioCodError: Swift.String
  public var bioDeError: Swift.String
  public var bioCodErrorReniec: Swift.String?
  public var bioDeErrorReniec: Swift.String?
  public var bioTiDoc: Swift.String
  public var bioNuDoc: Swift.String
  public var bioPreNom: Swift.String
  public var bioApPat: Swift.String
  public var bioApMat: Swift.String
  public var biofechaEmission: Swift.String
  public var bioGenero: Swift.String
  public var bioScore: Swift.String
  public var idTxn: Swift.String
  public var nuSolicitud: Swift.String
  public var nuIntentos: Swift.String
  public var nuIntentosCaptura: Swift.String
  public var bioRnecEstadoCedula: Swift.String
  public var bioRnecDescripcionEstado: Swift.String
  public var facialImageSearch: zy_fpay_validacionfacial_lib_ios.FacialImageSearch?
  public var addressReniec: zy_fpay_validacionfacial_lib_ios.AddressReniec?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case bioCodError, bioDeError, bioCodErrorReniec, bioDeErrorReniec, bioTiDoc, bioNuDoc, bioPreNom, bioApPat, bioApMat, bioScore, idTxn, nuSolicitud, nuIntentos
    case facialImageSearch
    case addressReniec
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct AddressReniec : Swift.Codable {
  public var bioCountry: Swift.String
  public var bioDepartment: Swift.String
  public var bioProvince: Swift.String
  public var bioDistric: Swift.String
  public var bioPrefixAddress: Swift.String
  public var bioAddress: Swift.String
  public var bioUrb: Swift.String
  public var bioPrefixUrbCondResid: Swift.String
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case bioCountry, bioDepartment, bioProvince, bioDistric, bioPrefixAddress, bioAddress, bioUrb, bioPrefixUrbCondResid
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct FacialImageSearch : Swift.Codable {
  public var buffer: Swift.String
  public var formatType: Swift.String
  public var height: Swift.String
  public var width: Swift.String
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case buffer, formatType, height, width
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct OcrDto : Swift.Codable {
  public var nuIntentos: Swift.String
  public var nuIntentosCaptura: Swift.String
  public var rsValidacionDoc: zy_fpay_validacionfacial_lib_ios.RsValidacionDoc?
  public var rsOcr: zy_fpay_validacionfacial_lib_ios.RsOcr?
  public var rsOcrResultado: zy_fpay_validacionfacial_lib_ios.RsOcrResultado?
  public var rsEvaluacionEdad: zy_fpay_validacionfacial_lib_ios.RsEvaluacionEdad?
  public var rsOcrSelfie: zy_fpay_validacionfacial_lib_ios.RsOcrSelfie?
  public var rsValidacionDatos: zy_fpay_validacionfacial_lib_ios.RsValidacionDatos?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case nuIntentos
    case rsValidacionDoc
    case rsOcr
    case rsOcrResultado
    case rsEvaluacionEdad
    case rsOcrSelfie
    case rsValidacionDatos
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct RsValidacionDoc : Swift.Codable {
  public var validaDocQualityScore: Swift.String
  public var validaDocLivenessScore: Swift.String?
  public var resultadoValidacion: Swift.String
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case validaDocQualityScore, validaDocLivenessScore, resultadoValidacion
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct RsOcr : Swift.Codable {
  public var fullName: Swift.String
  public var firstName: Swift.String
  public var lastName: Swift.String
  public var dateOfExpiry: Swift.String
  public var dateOfBirth: Swift.String
  public var sex: Swift.String
  public var age: Swift.String
  public var placeOfBirth: Swift.String
  public var dateOfIssue: Swift.String
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case fullName, firstName, lastName, dateOfExpiry, dateOfBirth, sex, age, placeOfBirth
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct RsOcrResultado : Swift.Codable {
  public var bioCodError: Swift.String
  public var bioDeError: Swift.String
  public var bioCodErrorVB: Swift.String
  public var bioCodesErrorVB: Swift.String
  public var bioScore: Swift.String
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case bioCodError, bioDeError, bioCodErrorVB, bioCodesErrorVB, bioScore
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct RsEvaluacionEdad : Swift.Codable {
  public var edadAprox: Swift.String
  public var resultadoValidacion: Swift.String
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case edadAprox, resultadoValidacion
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct RsOcrSelfie : Swift.Codable {
  public var bioCodError: Swift.String
  public var bioDeError: Swift.String
  public var bioCodErrorVB: Swift.String
  public var bioDeErrorVB: Swift.String
  public var idTxn: Swift.String
  public var nuSolicitud: Swift.String
  public var bioScore: Swift.String
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case bioCodError, bioDeError, bioCodErrorVB, bioDeErrorVB, idTxn, nuSolicitud, bioScore
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct RsValidacionDatos : Swift.Codable {
  public var bioCodError: Swift.String
  public var bioDeError: Swift.String
  public var bioCodErrorVB: Swift.String
  public var bioDeErrorVB: Swift.String
  public var bioScore: Swift.String
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case bioCodError, bioDeError, bioCodErrorVB, bioDeErrorVB, bioScore
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum ZyTipoOperacion : Swift.Int {
  case FACIAL
  case FULL
  case FLUJO_COLOMBIA
  case RESULTADO
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum ZyErrorUi : Swift.Int {
  case EXITO
  case ERROR_DOC_INVALIDO
  case ERROR_TIMEOUT
  case ERROR_NO_HIT
  case ERROR_SOLICITUD_BLOQUEADA
  case ERROR_FEIGN_CLIENT
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct ZyUILoadingRequest {
  public init()
  public var message: Swift.String?
  public var animated: Swift.Bool
}
public enum ZyUILoadingResult<T, C> {
  case ok(T)
  case cancel(C)
}
@objc @objcMembers public class ZyReactComp : ObjectiveC.NSObject {
  @objc public init(onView: UIKit.UIViewController)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class ReactRequest : ObjectiveC.NSObject {
  @objc public var token: Swift.String
  @objc public var bioOperacion: Swift.String
  @objc public var bioPais: Swift.String
  @objc public var bmoNuOperacionEmps: Swift.String
  @objc public var bmoNuSolicitud: Swift.String
  @objc public var bioTiDoc: Swift.String
  @objc public var bioNuDoc: Swift.String
  @objc public var bmoNombres: Swift.String
  @objc public var bmoApPaterno: Swift.String
  @objc public var bmoApMaterno: Swift.String
  @objc public var isDialogActivated: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class ReactResponse : ObjectiveC.NSObject {
  @objc public var coError: Swift.String
  @objc public var deError: Swift.String
  @objc public var soliNuOperacion: Swift.String
  @objc public var facebioCodError: Swift.String
  @objc public var facebioDeError: Swift.String
  @objc public var facebioCodErrorReniec: Swift.String?
  @objc public var facebioDeErrorReniec: Swift.String?
  @objc public var facebioTiDoc: Swift.String
  @objc public var facebioNuDoc: Swift.String
  @objc public var facebioPreNom: Swift.String
  @objc public var facebioApPat: Swift.String
  @objc public var facebioApMat: Swift.String
  @objc public var facebioScore: Swift.String
  @objc public var faceidTxn: Swift.String
  @objc public var facenuSolicitud: Swift.String
  @objc public var facefacialImageSearchbuffer: Swift.String
  @objc public var facefacialImageSearchformatType: Swift.String
  @objc public var facefacialImageSearchheight: Swift.String
  @objc public var facefacialImageSearchwidth: Swift.String
  @objc public var rsValidacionDocScoreValidacion: Swift.String
  @objc public var rsValidacionDocResultadoValidacion: Swift.String
  @objc public var rsOcrFirstName: Swift.String?
  @objc public var rsOcrLastName: Swift.String?
  @objc public var rsOcrDateOfExpiry: Swift.String?
  @objc public var rsOcrDateOfBirth: Swift.String?
  @objc public var rsOcrSex: Swift.String?
  @objc public var rsOcrAge: Swift.String?
  @objc public var rsOcrResultadoBioCodError: Swift.String?
  @objc public var rsOcrResultadoBioDeError: Swift.String?
  @objc public var rsOcrResultadoBioCodErrorVB: Swift.String?
  @objc public var rsOcrResultadoBioCodesErrorVB: Swift.String?
  @objc public var rsOcrResultadoBioScore: Swift.String?
  @objc public var rsEvaluacionEdadEdadAprox: Swift.String?
  @objc public var rsEvaluacionEdadEesultadoValidacion: Swift.String?
  @objc public var rsOcrSelfiebioCodError: Swift.String?
  @objc public var rsOcrSelfiebioDeError: Swift.String?
  @objc public var rsOcrSelfiebioCodErrorVB: Swift.String?
  @objc public var rsOcrSelfiebioDeErrorVB: Swift.String?
  @objc public var rsOcrSelfieidTxn: Swift.String?
  @objc public var rsOcrSelfienuSolicitud: Swift.String?
  @objc public var rsOcrSelfiebioScore: Swift.String?
  @objc public var rsValidacionDatosbioCodError: Swift.String?
  @objc public var rsValidacionDatosbioDeError: Swift.String?
  @objc public var rsValidacionDatosbioCodErrorVB: Swift.String?
  @objc public var rsValidacionDatosbioDeErrorVB: Swift.String?
  @objc public var rsValidacionDatosbioScore: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ZyUILoadingView : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension zy_fpay_validacionfacial_lib_ios.ZyTApiErrorEnum : Swift.Equatable {}
extension zy_fpay_validacionfacial_lib_ios.ZyTApiErrorEnum : Swift.Hashable {}
extension zy_fpay_validacionfacial_lib_ios.ZyTApiErrorEnum : Swift.RawRepresentable {}
extension zy_fpay_validacionfacial_lib_ios.Model : Swift.Equatable {}
extension zy_fpay_validacionfacial_lib_ios.Model : Swift.Hashable {}
extension zy_fpay_validacionfacial_lib_ios.Model : Swift.RawRepresentable {}
extension zy_fpay_validacionfacial_lib_ios.ZyLibError.CodingKeys : Swift.Equatable {}
extension zy_fpay_validacionfacial_lib_ios.ZyLibError.CodingKeys : Swift.Hashable {}
extension zy_fpay_validacionfacial_lib_ios.ZyLibError.CodingKeys : Swift.RawRepresentable {}
extension zy_fpay_validacionfacial_lib_ios.ZyCrossResponse.CodingKeys : Swift.Equatable {}
extension zy_fpay_validacionfacial_lib_ios.ZyCrossResponse.CodingKeys : Swift.Hashable {}
extension zy_fpay_validacionfacial_lib_ios.ZyCrossResponse.CodingKeys : Swift.RawRepresentable {}
extension zy_fpay_validacionfacial_lib_ios.BfResponseDto.CodingKeys : Swift.Equatable {}
extension zy_fpay_validacionfacial_lib_ios.BfResponseDto.CodingKeys : Swift.Hashable {}
extension zy_fpay_validacionfacial_lib_ios.BfResponseDto.CodingKeys : Swift.RawRepresentable {}
extension zy_fpay_validacionfacial_lib_ios.AddressReniec.CodingKeys : Swift.Equatable {}
extension zy_fpay_validacionfacial_lib_ios.AddressReniec.CodingKeys : Swift.Hashable {}
extension zy_fpay_validacionfacial_lib_ios.AddressReniec.CodingKeys : Swift.RawRepresentable {}
extension zy_fpay_validacionfacial_lib_ios.FacialImageSearch.CodingKeys : Swift.Equatable {}
extension zy_fpay_validacionfacial_lib_ios.FacialImageSearch.CodingKeys : Swift.Hashable {}
extension zy_fpay_validacionfacial_lib_ios.FacialImageSearch.CodingKeys : Swift.RawRepresentable {}
extension zy_fpay_validacionfacial_lib_ios.OcrDto.CodingKeys : Swift.Equatable {}
extension zy_fpay_validacionfacial_lib_ios.OcrDto.CodingKeys : Swift.Hashable {}
extension zy_fpay_validacionfacial_lib_ios.OcrDto.CodingKeys : Swift.RawRepresentable {}
extension zy_fpay_validacionfacial_lib_ios.RsValidacionDoc.CodingKeys : Swift.Equatable {}
extension zy_fpay_validacionfacial_lib_ios.RsValidacionDoc.CodingKeys : Swift.Hashable {}
extension zy_fpay_validacionfacial_lib_ios.RsValidacionDoc.CodingKeys : Swift.RawRepresentable {}
extension zy_fpay_validacionfacial_lib_ios.RsOcr.CodingKeys : Swift.Equatable {}
extension zy_fpay_validacionfacial_lib_ios.RsOcr.CodingKeys : Swift.Hashable {}
extension zy_fpay_validacionfacial_lib_ios.RsOcr.CodingKeys : Swift.RawRepresentable {}
extension zy_fpay_validacionfacial_lib_ios.RsOcrResultado.CodingKeys : Swift.Equatable {}
extension zy_fpay_validacionfacial_lib_ios.RsOcrResultado.CodingKeys : Swift.Hashable {}
extension zy_fpay_validacionfacial_lib_ios.RsOcrResultado.CodingKeys : Swift.RawRepresentable {}
extension zy_fpay_validacionfacial_lib_ios.RsEvaluacionEdad.CodingKeys : Swift.Equatable {}
extension zy_fpay_validacionfacial_lib_ios.RsEvaluacionEdad.CodingKeys : Swift.Hashable {}
extension zy_fpay_validacionfacial_lib_ios.RsEvaluacionEdad.CodingKeys : Swift.RawRepresentable {}
extension zy_fpay_validacionfacial_lib_ios.RsOcrSelfie.CodingKeys : Swift.Equatable {}
extension zy_fpay_validacionfacial_lib_ios.RsOcrSelfie.CodingKeys : Swift.Hashable {}
extension zy_fpay_validacionfacial_lib_ios.RsOcrSelfie.CodingKeys : Swift.RawRepresentable {}
extension zy_fpay_validacionfacial_lib_ios.RsValidacionDatos.CodingKeys : Swift.Equatable {}
extension zy_fpay_validacionfacial_lib_ios.RsValidacionDatos.CodingKeys : Swift.Hashable {}
extension zy_fpay_validacionfacial_lib_ios.RsValidacionDatos.CodingKeys : Swift.RawRepresentable {}
extension zy_fpay_validacionfacial_lib_ios.ZyTipoOperacion : Swift.Equatable {}
extension zy_fpay_validacionfacial_lib_ios.ZyTipoOperacion : Swift.Hashable {}
extension zy_fpay_validacionfacial_lib_ios.ZyTipoOperacion : Swift.RawRepresentable {}
extension zy_fpay_validacionfacial_lib_ios.ZyErrorUi : Swift.Equatable {}
extension zy_fpay_validacionfacial_lib_ios.ZyErrorUi : Swift.Hashable {}
extension zy_fpay_validacionfacial_lib_ios.ZyErrorUi : Swift.RawRepresentable {}
